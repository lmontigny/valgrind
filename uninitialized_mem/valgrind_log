==16999== Memcheck, a memory error detector
==16999== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16999== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==16999== Command: ./a.out
==16999== 
==16999== Conditional jump or move depends on uninitialised value(s)
==16999==    at 0x48B4029: vfprintf (vfprintf.c:1637)
==16999==    by 0x48BB605: printf (printf.c:33)
==16999==    by 0x109197: main (main.c:11)
==16999== 
==16999== Use of uninitialised value of size 8
==16999==    at 0x48AFD1E: _itoa_word (_itoa.c:179)
==16999==    by 0x48B35F3: vfprintf (vfprintf.c:1637)
==16999==    by 0x48BB605: printf (printf.c:33)
==16999==    by 0x109197: main (main.c:11)
==16999== 
==16999== Conditional jump or move depends on uninitialised value(s)
==16999==    at 0x48AFD29: _itoa_word (_itoa.c:179)
==16999==    by 0x48B35F3: vfprintf (vfprintf.c:1637)
==16999==    by 0x48BB605: printf (printf.c:33)
==16999==    by 0x109197: main (main.c:11)
==16999== 
==16999== Conditional jump or move depends on uninitialised value(s)
==16999==    at 0x48B4213: vfprintf (vfprintf.c:1637)
==16999==    by 0x48BB605: printf (printf.c:33)
==16999==    by 0x109197: main (main.c:11)
==16999== 
==16999== Conditional jump or move depends on uninitialised value(s)
==16999==    at 0x48B375D: vfprintf (vfprintf.c:1637)
==16999==    by 0x48BB605: printf (printf.c:33)
==16999==    by 0x109197: main (main.c:11)
==16999== 
0 1 2 3 4 5 6 7 8 31 
==16999== 
==16999== FILE DESCRIPTORS: 3 open at exit.
==16999== Open file descriptor 2: /home/lorenzo/Documents/dev/valgrind/uninitialized_mem/valgrind_log
==16999==    <inherited from parent>
==16999== 
==16999== Open file descriptor 1: /home/lorenzo/Documents/dev/valgrind/uninitialized_mem/valgrind_log
==16999==    <inherited from parent>
==16999== 
==16999== Open file descriptor 0: /dev/pts/2
==16999==    <inherited from parent>
==16999== 
==16999== 
==16999== HEAP SUMMARY:
==16999==     in use at exit: 0 bytes in 0 blocks
==16999==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==16999== 
==16999== All heap blocks were freed -- no leaks are possible
==16999== 
==16999== For counts of detected and suppressed errors, rerun with: -v
==16999== Use --track-origins=yes to see where uninitialised values come from
==16999== ERROR SUMMARY: 7 errors from 5 contexts (suppressed: 0 from 0)
